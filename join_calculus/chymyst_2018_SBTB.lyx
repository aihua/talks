#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\usetheme[secheader]{Boadilla}
\usecolortheme{seahorse}
\author{Sergei Winitzki}
\date{November 18, 2018}
\setbeamertemplate{headline}{} % disable headline at top
\setbeamertemplate{navigation symbols}{} % disable navigation bar at bottom
\title[Declarative distributed concurrency]{Declarative distributed concurrency in Scala}
\institute[SBTB 2018]{Scale by the Bay 2018}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frame{
\backslash
titlepage}
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Talk summary
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
How I learned to forget semaphores and to love concurrency
\end_layout

\begin_layout Standard

\family typewriter
Chymyst
\family default
 = an implementation of the Chemical Machine (CM) paradigm
\end_layout

\begin_layout Itemize
A 
\emph on
declarative language
\emph default
 for concurrent & parallel computations
\end_layout

\begin_deeper
\begin_layout Itemize
largely unknown and unused by the software engineering community
\end_layout

\begin_layout Itemize
available as an 
\begin_inset CommandInset href
LatexCommand href
name "open-source library & embedded DSL"
target "https://github.com/Chymyst/chymyst-core"
literal "false"

\end_inset

 for Scala
\end_layout

\begin_layout Itemize
presented in my SBTB talks in 2016 and 2017
\end_layout

\end_deeper
\begin_layout Itemize
CM 
\begin_inset Formula $\approx$
\end_inset

 Actors made purely functional and auto-parallelized
\end_layout

\begin_layout Itemize
Intuitions about why CM works better than other concurrency models
\end_layout

\begin_deeper
\begin_layout Itemize
Comparison with related work: ING Baker, BPMN (workflow)
\end_layout

\end_deeper
\begin_layout Itemize
New extension for distributed programming: DCM
\end_layout

\begin_layout Itemize
Code examples and demos
\end_layout

\begin_layout Standard
Not in this talk: academic theory
\end_layout

\begin_layout Itemize
Petri nets, 
\begin_inset Formula $\pi$
\end_inset

-calculus, join calculus, joinads, mobile agent calculus...
\end_layout

\begin_layout Itemize
DCM formulated within some theory of distributed programming?
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Concurrent & parallel programming: How we cope
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard

\emph on
Imperative
\emph default
 concurrency & parallelism is difficult to reason about:
\end_layout

\begin_layout Itemize
low-level API: callbacks, threads, semaphores, mutex locks
\end_layout

\begin_layout Itemize
hard to reason about mutable state and running processes
\end_layout

\begin_layout Itemize
hard to test â€“ non-deterministic runtime behavior!
\end_layout

\begin_deeper
\begin_layout Itemize
race conditions, deadlocks, livelocks
\end_layout

\end_deeper
\begin_layout Standard
\align center
\begin_inset VSpace -0.2cm
\end_inset

Known declarative approaches to avoid these problems:
\begin_inset VSpace -0.5cm
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="35text%">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="30text%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size footnotesize
Kind of concurrency
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size footnotesize
Formal structure
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size footnotesize
Scala code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
synchronous parallelism
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
applicative functor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Spark, 
\family typewriter
\size scriptsize
\color blue
.par.map()
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
asynchronous streaming DAG
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
monadic functor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\color blue
Future
\family default
\size default
\color inherit
, 
\family typewriter
\size scriptsize
\color blue
async
\family default
\size default
\color inherit
/
\family typewriter
\size scriptsize
\color blue
await
\family default
\size default
\color inherit
, 
\family typewriter
\size footnotesize
RxJava
\family default
\size default
, Akka Streams
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
unrestricted streaming
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
recursive monad
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Flink, fs2, ZIO
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
unrestricted concurrency
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
?
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Akka, 
\family typewriter
\size footnotesize
Chymyst
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For distributed computing: challenges remain
\end_layout

\begin_layout Itemize
coordination and consensus, persistence and fault tolerance
\end_layout

\begin_layout Itemize
cluster configuration and discovery
\end_layout

\begin_deeper
\begin_layout Itemize
distributed coordination as a service: Apache ZooKeeper, 
\family typewriter
etcd
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

Dining philosophers
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
The paradigmatic problem of concurrency, parallelism and resource contention
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "Five philosophers sit at a round table"
target "https://en.wikipedia.org/wiki/Dining_philosophers_problem"
literal "false"

\end_inset

, taking turns eating and thinking for random time intervals
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename An_illustration_of_the_dining_philosophers_problem.png
	display false
	height 4cm

\end_inset


\end_layout

\begin_layout Standard
Problem: simulate the process, avoiding deadlock and starvation
\end_layout

\begin_layout Standard
Solutions: 
\begin_inset CommandInset href
LatexCommand href
name "Rosetta Code"
target "https://rosettacode.org/wiki/Dining_philosophers"
literal "false"

\end_inset


\end_layout

\begin_layout Itemize
Can this be implemented via functional streams? (I think not.)
\end_layout

\begin_layout Itemize
The Chemical Machine code is purely declarative
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
From Actors to the Chemical Machine
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Modify the Actor model by adding new requirements:
\end_layout

\begin_layout Itemize
when messages arrive, actors are auto-created, maybe 
\emph on
in parallel
\end_layout

\begin_layout Itemize
actors may wait atomically for messages in 
\emph on
several
\emph default
 different mailboxes
\end_layout

\begin_layout Standard
It follows from these requirements that...
 
\end_layout

\begin_layout Itemize
Auto-created actor instances are stateless and invisible to user
\end_layout

\begin_layout Itemize
User code defines 
\emph on
mailboxes
\emph default
 and 
\emph on
computations
\emph default
 that consume messages
\end_layout

\begin_layout Itemize
Repeated messages may be consumed in parallel
\end_layout

\begin_layout Itemize
Messages are sent to mailboxes, not to specific actor instances:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\size scriptsize
\color blue
// Akka
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
val a: ActorRef = ...
 receive(x) 
\begin_inset Formula $\Rightarrow$
\end_inset

...
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
val b: ActorRef = ...
 receive(y) 
\begin_inset Formula $\Rightarrow$
\end_inset

...
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
a ! 100
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
b ! 1;   b ! 2;   b ! 3
\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout LyX-Code

\size scriptsize
\color blue
// Chymyst
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
...
 go { case a(x) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 ...
 } 
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
...
 go { case b(y) + c(z) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 ...
 }
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
a(100)
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
b(1);  b(2);  b(3); c("hello");
\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Itemize
All data resides on messages in mailboxes, is consumed automatically
\end_layout

\begin_layout Itemize
Mailboxes and computations are 
\emph on
values
\emph default
, can be sent on messages
\end_layout

\begin_layout Itemize
Code for computations can be purely functional
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
The Chemical Metaphor
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
From real to abstract chemistry
\end_layout

\begin_layout Standard
Real chemistry:
\begin_inset Formula 
\[
\text{HCl}+\text{NaOH}\rightarrow\text{NaCl}+\text{H}_{2}\text{O}
\]

\end_inset


\end_layout

\begin_layout Standard
Abstract chemistry:
\end_layout

\begin_layout Itemize
Chemical 
\begin_inset Quotes eld
\end_inset

soup
\begin_inset Quotes erd
\end_inset

 contains instances of abstract 
\begin_inset Quotes eld
\end_inset

molecules
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Combine certain sorts of molecules to start a 
\begin_inset Quotes eld
\end_inset

reaction
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\align center
Abstract chemical laws:
\begin_inset Newline newline
\end_inset


\family typewriter
\size footnotesize
\color blue
a + b 
\begin_inset Formula ${\color{blue}\rightarrow}$
\end_inset

 a
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size footnotesize
\color blue
a + c 
\begin_inset Formula ${\color{blue}\rightarrow}$
\end_inset

 
\begin_inset Formula $\textrm{Ã˜}$
\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "30col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename cham1a.eps
	width 100col%

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Itemize
Program code defines molecules 
\family typewriter
\size scriptsize
\color blue
a
\family default
\size default
\color inherit
, 
\family typewriter
\size scriptsize
\color blue
b
\family default
\size default
\color inherit
, 
\family typewriter
\size scriptsize
\color blue
c
\family default
\size default
\color inherit
, ...
 and chemical laws
\end_layout

\begin_layout Itemize
At initial time, the code emits some molecules into the 
\begin_inset Quotes eld
\end_inset

soup
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
The runtime system evolves the soup 
\emph on
concurrently
\emph default
 and 
\emph on
in parallel
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Chemical Machine in a Nutshell
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
\begin_inset Quotes eld
\end_inset

Better concurrency through chemistry
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Translating the chemical metaphor into practice:
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Itemize
Each molecule carries a 
\series bold
value
\series default
 (
\begin_inset Quotes eld
\end_inset

concurrent data
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Itemize
Each reaction computes a 
\begin_inset Quotes eld
\end_inset

molecule-set-valued
\begin_inset Quotes erd
\end_inset

 expression from input values
\end_layout

\begin_layout Itemize
Resulting molecules are emitted back into the soup
\end_layout

\begin_layout Itemize
Whenever input molecules are available, reactions start concurrently and
 in parallel
\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename cham2.eps
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
site(
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\color blue
\begin_inset space ~
\end_inset

 go { case 
\series bold
a
\series default
(x) + 
\series bold
b
\series default
(y) 
\begin_inset Formula $\Rightarrow$
\end_inset


\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\color blue
\begin_inset space ~
\end_inset

 
\begin_inset space ~
\end_inset

val z = f(x, y); 
\series bold
a
\series default
(z) },
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\color blue
\begin_inset space ~
\end_inset

 go { case 
\series bold
a
\series default
(x) + 
\series bold
c
\series default
(_) 
\begin_inset Formula $\Rightarrow$
\end_inset


\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\color blue
\begin_inset space ~
\end_inset

 
\begin_inset space ~
\end_inset

 
\begin_inset space ~
\end_inset

 println(x) }
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\color blue
)
\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

When a reaction starts: input molecules disappear, expression is computed,
 output molecules are emitted
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Chemical Machine vs.
\begin_inset space ~
\end_inset

Actor model
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
reaction 
\begin_inset Formula $\approx$
\end_inset

 template for an (auto-started) actor
\end_layout

\begin_layout Itemize
emitted molecule with value 
\begin_inset Formula $\approx$
\end_inset

 message with value, in a mailbox
\end_layout

\begin_layout Itemize
molecule emitters 
\begin_inset Formula $\approx$
\end_inset

 mailbox references
\end_layout

\begin_layout Standard
Programming with actors: 
\end_layout

\begin_layout Itemize
user code creates and manages explicit actor instances
\end_layout

\begin_layout Itemize
actors typically hold mutable state and/or mutate 
\begin_inset Quotes eld
\end_inset

behavior
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
reasoning is about running processes 
\emph on
and
\emph default
 the data sent on messages
\end_layout

\end_deeper
\begin_layout Standard
Programming with the Chemical Machine:
\end_layout

\begin_layout Itemize
processes auto-start when the needed input molecules are available
\end_layout

\begin_layout Itemize
many reactions may start at once, automatically parallel
\end_layout

\begin_deeper
\begin_layout Itemize
user code does not manipulate references to processes
\end_layout

\begin_deeper
\begin_layout Itemize
no state, no supervision, no lifecycle to manage
\end_layout

\end_deeper
\begin_layout Itemize
reasoning is 
\emph on
only
\emph default
 about the 
\emph on
data
\emph default
 currently available on molecules
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: throttling
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Throttle emitting a molecule 
\family typewriter
\size footnotesize
\color blue
s(x)
\family default
\size default
\color inherit
 with min.
\begin_inset space ~
\end_inset

delay of 
\family typewriter
\size footnotesize
\color blue
delta_t
\family default
\size default
\color inherit
 ms
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
val r = m[X]
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
val allow = m[Unit]
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
site(
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
  go { case r(x) + allow(_) â‡’ s(x)
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
       Thread.sleep(delta_t); allow()
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
     }
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
)
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color blue
allow() // Beginning of time; we allow requests.
\end_layout

\begin_layout Itemize
No threads/semaphores/locks, no mutable state
\end_layout

\begin_layout Itemize
External code may emit 
\family typewriter
\size footnotesize
\color blue
r(x)
\family default
\size default
\color inherit
 at will, but 
\family typewriter
\size footnotesize
\color blue
s(x)
\family default
\size default
\color inherit
 is then throttled
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "Implementations in Akka, in Monix, and ZIO"
target " https://github.com/softwaremill/akka-vs-scalaz/tree/master/core/src/main/scala/com/softwaremill/ratelimiter"
literal "false"

\end_inset

: about 50 LOC each
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Concurrent data and concurrent functions
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Intuitions leading to join calculus
\end_layout

\begin_layout Standard
Message to auto-started actor 
\begin_inset Formula $\approx$
\end_inset

 concurrent function call on data item
\end_layout

\begin_layout Standard
What would it mean to make ordinary functions concurrent?
\end_layout

\begin_layout Itemize
Several functions should be able to run at once
\end_layout

\begin_layout Itemize
No shared state: Concurrent processes work on 
\emph on
different
\emph default
 data
\end_layout

\begin_layout Standard
This will be implemented if:
\end_layout

\begin_layout Itemize
Each data item is labeled for specific concurrent function(s)
\end_layout

\begin_layout Itemize
Data items and functions are stored in a special 
\begin_inset Quotes eld
\end_inset

site
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Concurrent functions consume data from the site
\end_layout

\begin_layout Itemize
Computed results are emitted back to the site
\end_layout

\begin_layout Standard
Operational semantics:
\end_layout

\begin_layout Itemize
Concurrent functions auto-start whenever input data is available
\end_layout

\begin_layout Itemize
Different instances of a conc.
\begin_inset space \space{}
\end_inset

function consume separate data items
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Distributed Chemical Machine
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Run code on a cluster with almost no changes
\end_layout

\begin_layout Standard
Distributed Chemical Machine:
\end_layout

\begin_layout Itemize
Same as CM except some molecules are declared as 
\begin_inset Quotes eld
\end_inset

distributed
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
No other code changes necessary!
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Programs = chemical laws + initial molecules
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
First example: concurrent counter
\end_layout

\begin_layout Standard
We would like to decrement and increment concurrently
\end_layout

\begin_layout Standard
Chemical laws:
\end_layout

\begin_layout Itemize

\size scriptsize
\color blue
counter(n) + decr() 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 counter(n â€“ 1)
\end_layout

\begin_layout Itemize

\size scriptsize
\color blue
counter(n) + incr() 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 counter(n + 1)
\end_layout

\begin_layout Standard
Initial molecule instances:
\end_layout

\begin_layout Itemize

\size scriptsize
\color blue
counter(0)
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

Data stays on the molecules
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
We may emit 
\size scriptsize
\color blue
decr()
\size default
\color inherit
 and 
\size scriptsize
\color blue
incr()
\size default
\color inherit
 concurrently
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
Chymyst
\family default
: basic features
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Molecule emitters and reaction definitions in the Scala DSL
\end_layout

\begin_layout Standard
Define 
\series bold
molecule
\series default
 
\series bold
emitters
\series default
:
\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
val counter = m[Int]
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
val decr = m[Unit]
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
val incr = m[Unit]
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Declare some 
\series bold
reactions
\series default
 by pattern match on the molecule values:
\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
val r0 = go { case counter(n) + decr(_) 
\begin_inset Formula $\Rightarrow$
\end_inset

 counter(n-1) }
\family default
\size default
\color inherit
 
\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
val r1 = go { case counter(n) + incr(_) 
\begin_inset Formula $\Rightarrow$
\end_inset

 counter(n+1) }
\family default
\size default
\color inherit
 
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Activate a 
\series bold
reaction site
\series default
:
\family typewriter
\size scriptsize
\color blue
 site(r0, r1)
\end_layout

\begin_layout Itemize
For brevity, we can define reactions inline, within the 
\family typewriter
\size scriptsize
\color blue
site()
\family default
\size default
\color inherit
 call
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
Chymyst
\family default
: basic usage
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Operational semantics
\end_layout

\begin_layout Standard
Emit some molecules:
\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
counter(10)
\family default
\size default
\color inherit
 
\size footnotesize
\color gray
// non-blocking side-effect
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
incr()
\family default
\size default
\color inherit
 
\size footnotesize
\color gray
// ditto; we will have
\family typewriter
 counter(11)
\family default
 
\emph on
later
\size default
\emph default
\color inherit
 
\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
incr()
\family default
\size default
\color inherit
 
\size footnotesize
\color gray
// we will have 
\family typewriter
counter(12)
\family default
 
\emph on
later
\end_layout

\begin_layout Itemize
Calling 
\family typewriter
\size scriptsize
\color blue
counter(10)
\family default
\size default
\color inherit
 returns 
\family typewriter
\size scriptsize
\color blue
Unit
\family default
\size default
\color inherit
 and emits a molecule as a side-effect
\end_layout

\begin_layout Itemize
This could be the state of the chemical soup at some point in time:
\end_layout

\begin_deeper
\begin_layout Itemize

\size scriptsize
\color blue
counter(10) + incr() + incr()
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Concurrent data and concurrent functions
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Chemical metaphor vs.
\begin_inset space ~
\end_inset

concurrent terms metaphor
\end_layout

\begin_layout Itemize
Reaction consumes molecules 
\begin_inset Formula $\approx$
\end_inset

 function consumes input values
\end_layout

\begin_layout Itemize
Reaction emits molecules 
\begin_inset Formula $\approx$
\end_inset

 function returns result values
\end_layout

\begin_layout Itemize
Emit molecule with value 
\begin_inset Formula $\approx$
\end_inset

 lift data into the 
\begin_inset Quotes eld
\end_inset

concurrent world
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Define reaction 
\begin_inset Formula $\approx$
\end_inset

 lift a function into the 
\begin_inset Quotes eld
\end_inset

concurrent world
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Reaction site 
\begin_inset Formula $\approx$
\end_inset

 container for concurrent functions and data items
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
Chymyst
\family default
: more features
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Blocking vs.
\begin_inset space ~
\end_inset

non-blocking molecules
\end_layout

\begin_layout Standard

\series bold
Non-blocking
\series default
 molecules:
\end_layout

\begin_layout Itemize
emitter 
\emph on
does not wait
\emph default
 until a reaction starts with the new molecule
\end_layout

\begin_layout Standard

\series bold
Blocking
\series default
 molecules:
\end_layout

\begin_layout Itemize
emitter will block until a reaction starts and emits a 
\begin_inset Quotes eld
\end_inset

reply value
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
molecule implicitly carries a pseudo-emitter for 
\begin_inset Quotes eld
\end_inset

reply
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
when the 
\begin_inset Quotes eld
\end_inset

reply
\begin_inset Quotes erd
\end_inset

 is emitted, its value will be returned to caller
\end_layout

\begin_layout Itemize
Example:
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
val 
\color brown
f
\color blue
 = b[Int, String]
\family default
\size footnotesize
\color gray
 // create blocking emitter
\family typewriter
\size scriptsize
\color blue

\begin_inset Newline newline
\end_inset

go { 
\color brown
case f
\color blue
(x, 
\color olive
reply
\color blue
) + c(y) 
\begin_inset Formula $\Rightarrow$
\end_inset

 
\color olive
reply
\color blue
(s"${x + y}") }
\begin_inset Newline newline
\end_inset

c(100)
\family default
\size footnotesize
\color gray
 // non-blocking
\family typewriter
\size scriptsize
\color blue

\begin_inset Newline newline
\end_inset

val result: String = 
\color brown
f
\color blue
(200)
\family default
\size footnotesize
\color gray
 // blocking call, will get 
\begin_inset Quotes eld
\end_inset

300
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
Chymyst
\family default
: examples I
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Counter with blocking access
\end_layout

\begin_layout Standard
Blocking molecule 
\family typewriter
\size scriptsize
\color blue
getN
\family default
\size default
\color inherit
 reads the value 
\family typewriter
\size scriptsize
\color blue
x
\family default
\size default
\color inherit
 in 
\family typewriter
\size scriptsize
\color blue
counter(x)
\family default
\size default
\color inherit
:
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
val getN = b[Unit, Int]
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\size footnotesize
\color gray
// revise the join definition, appending this reaction:
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
...
 val r2 = go { case counter(x) + getN(_, reply) 
\begin_inset Formula $\Rightarrow$
\end_inset

 reply(x) }
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
site(r0, r1, r2)
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\size footnotesize
\color gray
// Emit non-blocking molecules as before...
 
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\size footnotesize
\color gray
// Now emit the blocking molecule:
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
val x = getN()
\family default
\size footnotesize
\color gray
 // blocking fetch, returns 
\family typewriter
Int
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

Source code: 
\begin_inset CommandInset href
LatexCommand href
name "CounterSpec.scala"
target "https://github.com/Chymyst/jc-talk-2017-examples/blob/master/src/test/scala/io/chymyst/talk_examples/CounterSpec.scala"
literal "false"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Definitions in local scopes
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle

\family typewriter
Chymyst
\family default
 = functional programming + join calculus
\end_layout

\begin_layout Standard
New molecules, reactions, and sites can be defined in 
\emph on
local scopes
\end_layout

\begin_layout Standard
Emitters (
\family typewriter
\size scriptsize
\color blue
read:
\begin_inset space ~
\end_inset

M[Int]
\family default
\size default
\color inherit
) can be molecule values too!
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
def makeCounter(init: Int): (M[Unit], M[M[Int]]) = {
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  val c = m[Int]
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  val decr = m[Unit]
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  val get = m[M[Int]]
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  site(     
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
   go { case c(x) + get(read) â‡’ c(x); read(x) },
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
   go { case c(x) + decr(_) â‡’ c(x - 1) }  
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  )
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  c(init)
\color gray
 // emit initial molecule
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  (decr, get) 
\color gray
// return emitters to the outside scope
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
}
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color gray
// usage:
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
val (decr, get) = makeCounter(100)
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
val result = m[Int]
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
get(result)
\color gray
 // non-blocking fetch
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
Chymyst
\family default
: examples II
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Options, Futures, and Map/Reduce
\end_layout

\begin_layout Standard
Implement 
\family typewriter
\size scriptsize
\color blue
Future
\family default
\size default
\color inherit
 with blocking 
\begin_inset Quotes eld
\end_inset


\family typewriter
\size scriptsize
\color blue
get
\family default
\size default
\color inherit

\begin_inset Quotes erd
\end_inset

:
\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
go { case get(_, reply) 
\begin_inset Formula $\Rightarrow$
\end_inset

 val x = f(); reply(x) }
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
Implement Map/Reduce:
\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
go { case c(x) 
\begin_inset Formula $\Rightarrow$
\end_inset

 d(x * 2) }
\family default
\color gray
 // 
\begin_inset Quotes eld
\end_inset

map
\begin_inset Quotes erd
\end_inset


\family typewriter
\color blue
 
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
go { case res(list) + d(s) 
\begin_inset Formula $\Rightarrow$
\end_inset

 res(s ::
\begin_inset space ~
\end_inset

list) } 
\family default
\color gray
// 
\begin_inset Quotes eld
\end_inset

reduce
\begin_inset Quotes erd
\end_inset


\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
go { case get(_, reply) + res(list) 
\begin_inset Formula $\Rightarrow$
\end_inset

 reply(list) }
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
res(Nil)
\family default
\size default
\color inherit
 
\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
Seq(1,2,3).foreach(x 
\begin_inset Formula $\Rightarrow$
\end_inset

 c(x))
\family default
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
\color blue
get()
\family default
\size footnotesize
\color gray
 // this returned Seq(4,6,2) in one test
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

Source code: 
\begin_inset CommandInset href
LatexCommand href
name "FutureSpec.scala"
target "https://github.com/Chymyst/jc-talk-2017-examples/blob/master/src/test/scala/io/chymyst/talk_examples/FutureSpec.scala"
literal "false"

\end_inset


\end_layout

\begin_layout Standard
For more examples, see the 
\begin_inset CommandInset href
LatexCommand href
name "main repository"
target "https://github.com/Chymyst/chymyst-core"
literal "false"

\end_inset

 (first-of, barriers, rendezvous, critical sections, readers/writers, Game
 of Life, 8 queens, etc.)
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
Chymyst
\family default
: examples III
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Five Dining Philosophers
\end_layout

\begin_layout Standard
Philosophers 
\family typewriter
\size scriptsize
\color blue
1, 2, 3, 4, 
\family default
5
\size default
\color inherit
 and forks 
\family typewriter
\size scriptsize
\color blue
f12, f23, f34, f45, f51
\end_layout

\begin_layout LyX-Code

\family sans
\size footnotesize
\color gray
// ...
 definitions of emitters, think(), eat() omitted for brevity
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
site (
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  go { case t1(_) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 think(1); h1() },
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  go { case t2(_) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 think(2); h2() },
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  go { case t3(_) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 think(3); h3() },
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  go { case t4(_) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 think(4); h4() },
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  go { case t5(_) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 think(5); h5() },
\end_layout

\begin_layout LyX-Code
 
\begin_inset space ~
\end_inset


\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  go { case h1(_) + f12(_) + f51(_) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 eat(1); t1() + f12() + f51() },
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  go { case h2(_) + f23(_) + f12(_) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 eat(2); t2() + f23() + f12() },
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  go { case h3(_) + f34(_) + f23(_) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 eat(3); t3() + f34() + f23() },
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  go { case h4(_) + f45(_) + f34(_) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 eat(4); t4() + f45() + f34() },
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  go { case h5(_) + f51(_) + f45(_) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 eat(5); t5() + f51() + f45() }
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
t1() + t2() + t3() + t4() + t5()
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
f12() + f23() + f34() + f45() + f51()
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Source code: 
\begin_inset CommandInset href
LatexCommand href
name "DiningPhilosophers.scala"
target "https://github.com/Chymyst/jc-talk-2017-examples/blob/master/src/main/scala/io/chymyst/talk_examples/DiningPhilosophers.scala"
literal "false"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
Chymyst
\family default
: examples IV
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Concurrent merge-sort: chemistry pseudocode
\end_layout

\begin_layout Standard
The 
\family typewriter
\size scriptsize
\color blue
mergesort
\family default
\size default
\color inherit
 molecule starts a 
\begin_inset Quotes eld
\end_inset

chain reaction
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Itemize
receives the upper-level 
\begin_inset Quotes eld
\end_inset


\family typewriter
\size scriptsize
\color brown
sortedResult
\family default
\size default
\color inherit

\begin_inset Quotes erd
\end_inset

 molecule
\end_layout

\begin_layout Itemize
defines its own 
\begin_inset Quotes eld
\end_inset


\family typewriter
\size scriptsize
\color brown
sorted
\family default
\size default
\color inherit

\begin_inset Quotes erd
\end_inset

 molecules in 
\emph on
local scope
\end_layout

\begin_layout Itemize
emits upper-level 
\begin_inset Quotes eld
\end_inset


\family typewriter
\size scriptsize
\color brown
sortedResult
\family default
\size default
\color inherit

\begin_inset Quotes erd
\end_inset

 when done
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
mergesort( (arr, 
\color brown
sortedResult
\color blue
) ) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
       val (part1, part2) = arr.splitAt(arr.length/2)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
       
\color brown
sorted1
\color blue
(x) + 
\color brown
sorted2
\color blue
(y) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 
\color brown
sortedResult
\color blue
( arrayMerge(x,y) )
\end_layout

\begin_layout LyX-Code
   
\end_layout

\begin_layout LyX-Code

\family sans
\size footnotesize
\color gray
       // Emit lower-level 
\family default
mergesort
\family sans
 molecules:
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
       mergesort(part1, 
\color brown
sorted1
\color blue
) + mergesort(part2, 
\color brown
sorted2
\color blue
)
\end_layout

\begin_layout LyX-Code

\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout

\family typewriter
Chymyst
\family default
: examples IV
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Concurrent merge-sort: 
\family typewriter
Chymyst
\family default
 code
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
val mergesort = m[(Array[T], M[Array[T]])]
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
site(
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
  go { case mergesort((arr, 
\color brown
sortedResult
\color blue
)) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
    if (arr.length <= 1) 
\family typewriter
sortedResult
\family default
(arr)
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
      else {
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
        val 
\color brown
sorted1
\color blue
 = m[Array[T]]
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
        val 
\color brown
sorted2
\color blue
 = m[Array[T]]
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
        
\color brown
site
\color blue
(
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
          go { case 
\color brown
sorted1
\color blue
(x) + 
\color brown
sorted2
\color blue
(y) 
\family typewriter

\begin_inset Formula $\Rightarrow$
\end_inset


\family default
 
\color brown
sortedResult
\color blue
(arrayMerge(x,y)) }
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
        )
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
        val (part1, part2) = arr.splitAt(arr.length/2)
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
        
\family sans
\size footnotesize
\color gray
// Emit lower-level 
\family default
mergesort
\family sans
 molecules:
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
        mergesort(part1, 
\color brown
sorted1
\color blue
) + mergesort(part2, 
\color brown
sorted2
\color blue
)
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color blue
    }
\end_layout

\begin_layout Standard

\size scriptsize
\color blue
})
\size default
\color inherit

\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

Source code: 
\begin_inset CommandInset href
LatexCommand href
name "MergeSortSpec.scala"
target "https://github.com/Chymyst/jc-talk-2017-examples/blob/master/src/test/scala/io/chymyst/talk_examples/MergeSortSpec.scala"
literal "false"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Pipelined molecules: An automatic optimization
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
In join calculus: channels with 
\emph on
ordered
\emph default
 mailboxes 
\end_layout

\begin_layout Standard
Reaction scheduler in 
\family typewriter
Chymyst
\family default
:
\end_layout

\begin_layout Itemize
Examines all present molecule instances and runs the next reaction 
\end_layout

\begin_deeper
\begin_layout Itemize
Is it sufficient to examine 
\emph on
only one
\emph default
 molecule instance?
\end_layout

\begin_deeper
\begin_layout Itemize
This could be true or false depending on the specific molecule
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
If true, the molecule's instances are held in a queue (
\begin_inset Quotes eld
\end_inset

pipelined
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
Chymyst
\family default
 automatically makes 
\emph on
some
\emph default
 molecules pipelined
\end_layout

\end_deeper
\begin_layout Standard
In a given chemical program, can we pipeline the molecule 
\family typewriter
\size footnotesize
\color blue
a(x)
\family default
\size default
\color inherit
?
\end_layout

\begin_layout Itemize
Consider the predicate 
\family typewriter
\size footnotesize
\color blue
f(x, y, z,...)
\family default
\size default
\color inherit
 for starting a reaction, e.g.:
\begin_inset Newline newline
\end_inset


\family typewriter
\size footnotesize
\color blue
 f(x, y, b) = HAVE(b(y)) && x == 0 && y > x
\end_layout

\begin_layout Itemize
The predicate 
\family typewriter
\size footnotesize
\color blue
f(...)
\family default
\size default
\color inherit
 must be 
\emph on
factorizable
\emph default
 into a conjuction:
\begin_inset Newline newline
\end_inset


\family typewriter
\size footnotesize
\color blue
 f(x, y, z, ...) = p(x) && q(y, z,...)
\end_layout

\begin_deeper
\begin_layout Itemize
I have a proof that this optimization preserves semantics
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Everything you need to know about join calculus...
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
...
 but the 
\begin_inset CommandInset href
LatexCommand href
name "Wikipedia page"
target "https://en.wikipedia.org/wiki/Join-calculus"
literal "false"

\end_inset

 confused you, so you were afraid to ask
\end_layout

\begin_layout Standard
Academic descriptions of JC use the 
\begin_inset Quotes eld
\end_inset

message/channel
\begin_inset Quotes erd
\end_inset

 terminology
\end_layout

\begin_layout Standard

\family typewriter
\size footnotesize
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Chymyst
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
join calculus
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
molecule
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
message on channel
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
a(123)
\family default
\color gray
 // side effect
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
emitter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
channel name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
val a:
\begin_inset space ~
\end_inset

M[Int]
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
blocking emitter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
blocking channel
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
val q:
\begin_inset space ~
\end_inset

B[Unit, Int]
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reaction
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
process
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
go { case a(x) + ...
 }
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
emitting a molecule
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sending a message
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
a(123)
\family default
\color gray
 // side effect
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reaction site
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
join definition
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\color blue
site(r1, r2, ...)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Join Calculus in the wild
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Previous implementations:
\end_layout

\begin_deeper
\begin_layout Itemize
Funnel [
\begin_inset CommandInset href
LatexCommand href
name "M. Odersky et al., 2000"
target "http://lampwww.epfl.ch/funnel/"
literal "false"

\end_inset

]
\end_layout

\begin_layout Itemize
Join Java [
\begin_inset CommandInset href
LatexCommand href
name "von Itzstein et al., 2001-2005"
target "http://www.vonitzstein.com/Project_JoinJava.html"
literal "false"

\end_inset

]
\end_layout

\begin_layout Itemize
JOCaml  (
\begin_inset CommandInset href
LatexCommand href
name "jocaml.inria.fr"
target "http://jocaml.inria.fr"
literal "false"

\end_inset

) [
\begin_inset CommandInset href
LatexCommand href
name "Fournet et al.Â 2003"
target "http://research.microsoft.com/en-us/um/people/fournet/papers/jocaml-afp4-summer-school-02.pdf"
literal "false"

\end_inset

]
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

Join in Scala
\begin_inset Quotes erd
\end_inset

 compiler patch [
\begin_inset CommandInset href
LatexCommand href
name "V. Cremet 2003"
target "http://lampwww.epfl.ch/~cremet/misc/join_in_scala/index.html"
literal "false"

\end_inset

]
\end_layout

\begin_layout Itemize
Joins library for .NET [
\begin_inset CommandInset href
LatexCommand href
name "P. Crusso 2006"
target "http://research.microsoft.com/en-us/um/people/crusso/joins/"
literal "false"

\end_inset

]
\end_layout

\begin_layout Itemize
ScalaJoins [
\begin_inset CommandInset href
LatexCommand href
name "P. Haller 2008"
target "http://lampwww.epfl.ch/~phaller/joins/index.html"
literal "false"

\end_inset

]
\end_layout

\begin_layout Itemize
Joinads (F#, Haskell) [
\begin_inset CommandInset href
LatexCommand href
name "Petricek and Syme 2011"
target "https://www.microsoft.com/en-us/research/publication/joinads-a-retargetable-control-flow-construct-for-reactive-parallel-and-concurrent-programming/"
literal "false"

\end_inset

]
\end_layout

\begin_layout Itemize
ScalaJoin [
\begin_inset CommandInset href
LatexCommand href
name "J. He 2011"
target "https://github.com/Jiansen/ScalaJoin"
literal "false"

\end_inset

]
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "CocoaJoin (iOS)"
target "https://github.com/winitzki/CocoaJoin"
literal "false"

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "AndroJoin (Android)"
target "https://github.com/winitzki/AndroJoin"
literal "false"

\end_inset

 [S.W.
\family typewriter
\size scriptsize
\color blue

\begin_inset space ~
\end_inset


\family default
\size default
\color inherit
2013]
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "JEScala"
target "http://guidosalva.github.io/REScala/jescala/"
literal "false"

\end_inset

 [G.
 Salvaneschi 2014]
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Chymyst"
target "https://github.com/chymyst/chymyst-core"
literal "false"

\end_inset

 -- a new JC implementation in Scala (this talk)
\end_layout

\begin_deeper
\begin_layout Itemize
Better syntax, more checks of code sanity
\end_layout

\begin_layout Itemize
(Some) automatic fault tolerance
\end_layout

\begin_layout Itemize
Thread pool and thread priority control
\end_layout

\begin_layout Itemize
Event monitoring and unit testing APIs
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Conclusions and outlook
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Chemical machine = declarative, purely functional concurrency
\end_layout

\begin_deeper
\begin_layout Itemize
Similar to 
\begin_inset Quotes eld
\end_inset

Actors
\begin_inset Quotes erd
\end_inset

, but easier to use and 
\begin_inset Quotes eld
\end_inset

more purely functional
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Short, declarative code implementing barriers, rendezvous, etc.
\end_layout

\end_deeper
\begin_layout Itemize
A new open-source Scala implementation: 
\begin_inset CommandInset href
LatexCommand href
name "Chymyst"
target "https://github.com/Chymyst/chymyst-core"
literal "false"

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Full-featured implementation of join calculus
\end_layout

\begin_layout Itemize
Static DSL code analysis (with Scala macros)
\end_layout

\begin_layout Itemize
Industry-strength features (thread priority control, pipelining, fault tolerance
, unit testing and debugging APIs)
\end_layout

\begin_layout Itemize
Extensive documentation: 
\begin_inset CommandInset href
LatexCommand href
name "tutorial book"
target "https://winitzki.gitbooks.io/concurrency-in-reactions-declarative-multicore-in/content/"
literal "false"

\end_inset

 and 
\begin_inset CommandInset href
LatexCommand href
name "draft paper"
target "https://github.com/winitzki/talks/blob/master/join-calculus-paper/join-calculus-paper.pdf"
literal "false"

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
On the future roadmap:
\end_layout

\begin_deeper
\begin_layout Itemize
Thread fusion for better performance
\end_layout

\begin_layout Itemize
Full continuation-passing transformation to nonblocking code
\end_layout

\begin_layout Itemize
Automatic backpressure (
\begin_inset Quotes eld
\end_inset

reaction temperature
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Itemize
Automatic distributed runtime (
\begin_inset Quotes eld
\end_inset

distributed soup
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_deeper
\begin_layout Itemize
Example code for 
\begin_inset CommandInset href
LatexCommand href
name "this talk"
target "https://github.com/winitzki/talks/blob/master/join_calculus/join_calculus_2017_SBTB.pdf"
literal "false"

\end_inset

: 
\size footnotesize

\begin_inset CommandInset href
LatexCommand href
name "github.com/Chymyst/jc-talk-2017-examples"
target "https://github.com/Chymyst/jc-talk-2017-examples"
literal "false"

\end_inset


\end_layout

\end_deeper
\end_body
\end_document
